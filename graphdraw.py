import networkx as nx
import csv


def normalise_dict(dict1):
	"""
	Takes a dictionary, finds the lowest value and divides all values in the dictionary by it.
	Returns a new dictionary with the same keys and these normalised values.

	Args:
		dict1: A dictionary containing a series of values (as str, float or int)
		e.g. dict1 = {'Cassette1': 5, 'Cassette2': 7, 'Cassette3': 4}
	
	Returns:
		A dictionary with the same format as dict1.
	"""
	value_list = [float(i) for i in dict1.values()]
	dict_min = min(value_list)
	normal_dict = {}
	for key in dict1:
		normal_dict[key] = float(dict1[key])/dict_min
	return normal_dict


def set_node_sizes(dot1, dict1):
	"""
	Takes a dot graph object (as generated by networkx's to_pydot function), and a dictionary of values
	with keys identical to the node names in the graph. Node sizes in the graph are set relative to the
	corresponding values in the dictionary, with the smallest value giving a node size of 1.
	This function directly modifies the passed graph, and does not return anything.

	Args:
		dot1: A networkx.Graphviz.dot object, created by networkx.to_pydot()
		dict1: A dictionary containing a series of values, with keys equal to the node names in dot1
			   NB: Due to the way names are stored in dot, keys MUST start and end with the " character
		e.g. dict1 = {'"Node1"': 45, '"Node2"': 98, '"Node3"': 67}
	"""
	sizes = normalise_dict(dict1)
	for node in dot1.get_nodes():
		node.set_height(sizes[node.get_name()])
		node.set_width(sizes[node.get_name()])


def set_node_labels(dot1, dict1):
	"""
	Takes a dot graph object (as generated by networkx's to_pydot function), and a dictionary of values
	with keys identical to the node names in the graph. Node labels in the graph are set equal to the node
	name plus "Count: " followed by the value in the dictionary corresponding to that node.
	This function directly modifies the passed graph, and does not return anything.

	Args:
		dot1: A networkx.Graphviz.dot object, created by networkx.to_pydot()
		dict1: A dictionary containing a series of values, with keys equal to the node names in dot1
			   NB: Due to the way names are stored in dot, keys MUST start and end with the " character
		e.g. dict1 = {'"Node1"': 45, '"Node2"': 98, '"Node3"': 67}
	"""
	for node in dot1.get_nodes():
		name = node.get_name()
		node.set_label(name[:-1]+'\n\nCount: '+dict1[name]+'"')
		print(node.get_label())


def produce_graph(nxgraph, sizedict, filename):
	"""
	Writes a networkx graph to the specified file as a .jpg, with node sizes being equal to the values in
	the accompanying dictionary.
	NB: Graphviz must be installed locally for this to work.

	Args:
		nxgraph: A graph in the standard networkX format.
		sizedict: A dictionary of values where keys are identical to the node names in nxgraph. Values will
				  determine the relative size of the appropriate nodes in the output graph.
	  	filename: Name of the file you want to output to.
	  	e.g.
	  	sizedict = {'"Node1"': 45, '"Node2"': 98, '"Node3"': 67}
	  	filename = 'outfile.jpg'
	"""
	#Takes a Networkx graph, and a series of numbers with the same indices as the node
	#names; writes a jpg file with nodes of size determined by the series.
	dotgraph = nx.to_pydot(nxgraph)
	set_node_sizes(dotgraph, sizedict)
	set_node_labels(dotgraph, sizedict)
	dotgraph.set_nodesep(1)
	dotgraph.write_jpg(filename)

#TODO: Add main() and command line parser to allow this to be run as a script as well as a module.
